#!KAMAILIO
#### STATIC DEFINITIONS####################################################
#!define WITH_MYSQL
#!define WITH_AUTH
#!define WITH_USRLOCDB
#!define WITH_TLS
#!define WITH_WEBSOCKETS
#!define WITH_ANTIFLOOD
#!define WITH_LOCALHOST_WS

#!substdef "!MY_SIP_PORT!5060!g"
#!substdef "!MY_SIPS_PORT!5061!g"
#!substdef "!MY_WS_PORT!8080!g"
#!substdef "!MY_WSS_PORT!4443!g"

#!substdef "!MY_IP4_ADDR!{{ MY_IP4_ADDR}}!g"
#!substdef "!IP4_LOCALHOST!127.0.0.1!g"
#!substdef "!MY_WS4_ADDR!tcp:MY_IP4_ADDR:MY_WS_PORT!g"
#!substdef "!MY_WSS4_ADDR!tls:MY_IP4_ADDR:MY_WSS_PORT!g"
#!substdef "!LOCALHOST_WS4_ADDR!tcp:IP4_LOCALHOST:MY_WS_PORT!g"
#!substdef "!LOCALHOST_WSS4_ADDR!tls:IP4_LOCALHOST:MY_WSS_PORT!g"

#!ifdef WITH_IPV6
#!substdef "!MY_IP6_ADDR![{{ MY_IP6_ADDR }}]!g"
#!substdef "!IP6_LOCALHOST![::1]!g"
#!substdef "!MY_WS6_ADDR!tcp:MY_IP6_ADDR:MY_WS_PORT!g"
#!substdef "!MY_WSS6_ADDR!tls:MY_IP6_ADDR:MY_WSS_PORT!g"
#!substdef "!LOCALHOST_WS6_ADDR!tcp:IP6_LOCALHOST:MY_WS_PORT!g"
#!substdef "!LOCALHOST_WSS6_ADDR!tls:IP6_LOCALHOST:MY_WSS_PORT!g"
#!endif

#!substdef "!MY_DOMAIN!{{ MY_DOMAIN }}!g"

#########################################################################

# NOT COMMENTS: lines starting with #!define, #!ifdef, #!endif, #!else, #!trydef, #!subst, #!substdef
# Listing of feature activation codes, please activate them above this listing:
#   define WITH_DEBUG
#   define WITH_MYSQL
#   define WITH_AUTH 
#   define WITH_IPAUTH      : adds IP addresses with group id '1' to 'address' table
#   define WITH_USRLOCDB    : persistant location
#   define WITH_PRESENCE 
#   define WITH_MSGREBUILD  : special SIP headers
#   define WITH_NAT         : works with RTP proxy
#   define WITH_RTPENGINE   : NOT RTP proxy (mutually exclusive with above)
#   define WITH_PSTN        : set the value of pstn.gw_ip, route[PSTN] for regexp routing condition
#   define WITH_ALIASDB 
#   define WITH_SPEEDDIAL   : speedial lookups
#   define WITH_MULTIDOMAIN : multiple SIP domains are active and tracked
#   define WITH_TLS         : enalbe TLS
#   define WITH_JSONRPC     : SONRPC over HTTP(S) support; adjust event_route[xhttp:request] for access policy
#   define WITH_ANTIFLOOD   : block if more than 16 requests in 2 seconds and ban for 300 seconds
#   define WITH_BLOCK3XX    : block 3XX redirect replies
#   define WITH_BLOCK401407 : block 401 and 407 authentication replies
#   define WITH_VOICEMAIL   : using asterisk for this, so not using
#   define WITH_ACCDB       : activate call accouting server
#   define WITH_NATSIPPING  : enable SIP OPTIONS keepalives (no thanks)

#!ifdef ACCDB_COMMENT
  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
#!endif

####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"

####### Defined Values #########

# *** Value defines - IDs used later in config
#!ifdef WITH_DEBUG
#!define DBGLEVEL 3
#!else
#!define DBGLEVEL 2
#!endif

#!ifdef WITH_MYSQL
# ==============================================================
#!define DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
# ==============================================================
#!endif

#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

## flags
# FLT_ - Flag per Transaction (message)
# FLB_ - FLag per Branch
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7
#!define FLB_RTPWS 8
#!define FLB_IPV6 9
#!define FLB_V4V6 10
#!define FLB_BRIDGE 11


####### Global Parameters #########

/* LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR, ... */
debug=DBGLEVEL

/* set to 'yes' to print log messages to terminal or use '-E' cli option */
log_stderror=no

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

children=8

port=MY_SIP_PORT
tls_port_no=MY_SIPS_PORT

#!ifdef WITH_TLS
enable_tls=yes
#!endif

listen=MY_IP4_ADDR
#!ifdef WITH_LOCALHOST_SIP
listen=IP4_LOCALHOST
#!endif
#!ifdef WITH_IPV6
listen=MY_IP6_ADDR
#!ifdef WITH_LOCALHOST_SIP
listen=IP6_LOCALHOST
#!endif
#!endif

#!ifdef WITH_WEBSOCKETS
listen=MY_WS4_ADDR
#!ifdef WITH_LOCALHOST_WS
listen=LOCALHOST_WS4_ADDR
#!endif
#!ifdef WITH_IPV6
listen=MY_WS6_ADDR
#!ifdef WITH_LOCALHOST_WS
listen=LOCALHOST_WS6_ADDR
#!endif
#!endif
#!ifdef WITH_TLS
listen=MY_WSS4_ADDR
#!ifdef WITH_LOCALHOST_WS
listen=LOCALHOST_WSS4_ADDR
#!endif
#!ifdef WITH_IPV6
listen=MY_WSS6_ADDR
#!ifdef WITH_LOCALHOST_WS
listen=LOCALHOST_WSS6_ADDR
#!endif
#!endif
#!endif
#!endif

use_dns_cache = on          # Use KAMAILIO internal DNS cache
use_dns_failover = on       # Depends on KAMAILIO internal DNS cache
dns_srv_loadbalancing = on
dns_try_naptr = on
dns_retr_time=1             # Time in seconds before retrying a DNS request
dns_retr_no=3               # Number of DNS retransmissions before giving up

# Set protocol preference order - ignore target priority
dns_naptr_ignore_rfc= yes   # Ignore target NAPTR priority
dns_tls_pref=50             # First priority: TLS
dns_tcp_pref=30             # Second priority: TCP
dns_udp_pref=10             # Third priority: UDP

tcp_connection_lifetime=3605

/* upper limit for TCP connections (it includes the TLS connections) */
tcp_max_connections=2048
tcp_accept_no_cl=yes

#!ifdef WITH_TLS
enable_tls=yes
tls_max_connections=2048
#!endif

/* set it to yes to enable sctp and load sctp.so module */
enable_sctp=no

####### Custom Parameters #########

/* These parameters can be modified runtime via RPC interface
 * - see the documentation of 'cfg_rpc' module.
 *
 * Format: group.id = value 'desc' description
 * Access: $sel(cfg_get.group.id) or @cfg_get.group.id */

#!ifdef WITH_PSTN
/* PSTN GW Routing
 *
 * - pstn.gw_ip: valid IP or hostname as string value, example:
 * pstn.gw_ip = "10.0.0.101" desc "My PSTN GW Address"
 *
 * - by default is empty to avoid misrouting */
pstn.gw_ip = "" desc "PSTN GW Address"
pstn.gw_port = "" desc "PSTN GW Port"
#!endif

#!ifdef WITH_VOICEMAIL
/* VoiceMail Routing on offline, busy or no answer
 *
 * - by default Voicemail server IP is empty to avoid misrouting */
voicemail.srv_ip = "" desc "VoiceMail IP Address"
voicemail.srv_port = "5060" desc "VoiceMail Port"
#!endif

################################
####### Modules Section ########
################################

/* set paths to location of modules */
# mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

#!ifdef WITH_JSONRPC
loadmodule "xhttp.so"
#!endif

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "sdpops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_WEBSOCKETS
loadmodule "xhttp.so"
loadmodule "websocket.so"
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

######################################################################
# ----------------- setting module-specific parameters ---------------
######################################################################

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
# modparam("jsonrpcs", "fifo_name", "/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/run/kamailio/kamailio_rpc.sock")
#!ifdef WITH_JSONRPC
modparam("jsonrpcs", "transport", 7)
#!endif

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")

# ----- sanity params -----
modparam("sanity", "autodrop", 0)

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "gruu_enabled", 0)
  # 0=disable Path handling
modparam("registrar", "use_path", 1)
  # save Path even if not listed in Supported header
modparam("registrar", "path_mode", 0)

################################################### 
# REMOVE THIS SECTION IN TESTING - NOT NEEDED
# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
 * if you enable this parameter, be sure the enable "append_fromtag"
 * in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
    "src_user=$fU;src_domain=$fd;src_ip=$si;"
    "dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
    "src_user=$fU;src_domain=$fd;src_ip=$si;"
    "dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif
############################################################


# ----- usrloc params -----
modparam("usrloc", "timer_interval", 60)
modparam("usrloc", "timer_procs", 1)
modparam("usrloc", "use_domain", MULTIDOMAIN)
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
#!endif

# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "load_backends", 1)
#!endif

#!endif

# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
/* register callback to match myself condition with domains list */
modparam("domain", "register_myself", 1)
#!endif

#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif

#!ifdef WITH_NAT
# ----- rtpengine params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2223")
modparam("rtpengine", "extra_id_pv", "$avp(extra_id)")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@MY_DOMAIN")
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

# ----- corex params -----
modparam("corex", "alias_subdomains", "MY_DOMAIN")

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/etc/kamailio/tls.cfg")
modparam("tls", "tls_force_run", 1)
#!endif

#!ifdef WITH_WEBSOCKETS
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
#!endif

#!ifdef WITH_HOMER
#Siptrace
modparam("siptrace", "duplicate_uri", "sip:127.0.0.1:9060")
modparam("siptrace", "hep_mode_on", 1)
modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "trace_flag", 22)
modparam("siptrace", "trace_on", 1)
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
/* ip ban htable with autoexpire after 5 minutes */
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

####################################################################
####### Routing Logic ########
####################################################################

/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {

#!ifdef WITH_HOMER
    # start duplicate the SIP message here
    sip_trace();
    setflag(22);
#!endif

    # per request initial checks
    route(REQINIT);
    
    xlog("L_INFO", "START: $rm from $fu (IP:$si:$sp)\n");

#!ifdef WITH_WEBSOCKETS
    if (nat_uac_test(64)) {
        # Do NAT traversal stuff for requests from a WebSocket
        # connection - even if it is not behind a NAT!
        # This won't be needed in the future if Kamailio and the
        # WebSocket client support Outbound and Path.
        force_rport();
        if (is_method("REGISTER")) {
            fix_nated_register();
        } else if (!add_contact_alias()) {
            xlog("L_ERR", "Error aliasing contact <$ct>\n");
            sl_send_reply("400", "Bad Request");
            exit;
        }
    }
#!endif

    #############################
    # NAT detection
    #############################
    route(NATDETECT);

    #############################
    # CANCEL processing
    #############################
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        }
        exit;
    }

    #############################
    # handle retransmissions
    #############################
    if (!is_method("ACK")) {
        if(t_precheck_trans()) {
            t_check_trans();
            exit;
        }
        t_check_trans();
    }

    ####################################
    # handle requests within SIP dialogs
    ####################################
    route(WITHINDLG);

    ### only initial requests (no To tag)

    ################
    # authentication
    ################
    route(AUTH);

    # record routing for dialog forming requests (in case they are routed)
    # - remove preloaded route headers
    remove_hf("Route");
    if (is_method("INVITE|SUBSCRIBE")) {
        record_route();
    }

    # account only INVITEs
    if (is_method("INVITE")) {
        setflag(FLT_ACC); # do accounting
    }

    ######################################
    # dispatch requests to foreign domains
    ######################################
    route(SIPOUT);

    ### requests for my local domains

    ##################################
    # handle presence related requests
    ##################################
    route(PRESENCE);

    ######################
    # handle registrations
    ######################
    route(REGISTRAR);

    if ($rU==$null) {
        # request with no Username in RURI
        sl_send_reply("484","Address Incomplete");
        exit;
    }

    ###############################
    # REMOVE THIS IN TESTING
    # dispatch destinations to PSTN
    ###############################
    route(PSTN);

    #######################
    # user location service
    #######################
    route(LOCATION);
}

###############################
# Wrapper for relaying requests
###############################
route[RELAY] {
    # enable additional event routes for forwarded requests
    # - serial forking, RTP relaying handling, a.s.o.
    if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
        if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
    }
    
    if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
        if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
    }
    
    if (is_method("INVITE")) {
        if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
    }

    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# =========================================
# Per SIP request initial checks
# =========================================
route[REQINIT] {
    # no connect for sending replies
    set_reply_no_connect();
    # enforce symmetric signaling
    # - send back replies to the source address of request
    force_rport();

#!ifdef WITH_ANTIFLOOD
    # flood detection from same IP and traffic ban for a while
    # be sure you exclude checking trusted peers, such as pstn gateways
    # - local host excluded (e.g., loop to self)
    if(src_ip!=myself) {
        if($sht(ipban=>$si)!=$null) {
            # ip is already blocked
            xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
            exit;
        }
        if (!pike_check_req()) {
            xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
            $sht(ipban=>$si) = 1;
            exit;
        }
    }
#!endif
    if($ua =~ "friendly|scanner|sipcli|sipvicious|VaxSIPUserAgent") {
        # silent drop for scanners - uncomment next line if want to reply
        # sl_send_reply("200", "OK");
        exit;
    }

    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(is_method("OPTIONS") && uri==myself && $rU==$null) {
        sl_send_reply("200","Keepalive");
        exit;
    }

    if(!sanity_check("17895", "7")) {
        xlog("Malformed SIP request from $si:$sp\n");
        exit;
    }
}

####################################
# Handle requests within SIP dialogs
####################################
route[WITHINDLG] {
    if (!has_totag()) return;

    # sequential request withing a dialog should
    # take the path determined by record-routing
    if (loose_route()) {
#!ifdef WITH_WEBSOCKETS
        if ($du == "") {
            if (!handle_ruri_alias()) {
                xlog("L_ERR", "Bad alias <$ru>\n");
                sl_send_reply("400", "Bad Request");
                exit;
            }
        }
#!endif
        route(DLGURI);
        if (is_method("BYE")) {
            setflag(FLT_ACC); # do accounting ...
            setflag(FLT_ACCFAILED); # ... even if the transaction fails
        } else if ( is_method("ACK") ) {
            # ACK is forwarded statelessly
            route(NATMANAGE);
        } else if ( is_method("NOTIFY") ) {
            # Add Record-Route for in-dialog NOTIFY as per RFC 6665.
            record_route();
        }
        route(RELAY);
        exit;
    }

    if (is_method("SUBSCRIBE") && uri == myself) {
        # in-dialog subscribe requests
        route(PRESENCE);
        exit;
    }
    if ( is_method("ACK") ) {
        if ( t_check_trans() ) {
            # no loose-route, but stateful ACK;
            # must be an ACK after a 487
            # or e.g. 404 from upstream server
            route(RELAY);
            exit;
        } else {
            # ACK without matching transaction ... ignore and discard
            exit;
        }
    }
    sl_send_reply("404","Not here");
    exit;
}

##########################
# Handle SIP registrations
##########################
route[REGISTRAR] {
    if (!is_method("REGISTER")) return;

    if(isflagset(FLT_NATS)) {
        setbflag(FLB_NATB);
#!ifdef WITH_NATSIPPING
        # do SIP NAT pinging
        setbflag(FLB_NATSIPPING);
#!endif
    }
    if (!save("location")) {
        sl_reply_error();
    }
    exit;
}

#######################
# User location service
#######################
route[LOCATION] {

    $avp(oexten) = $rU;
    if (!lookup("location")) {
        $var(rc) = $rc;
        route(TOVOICEMAIL);
        t_newtran();
        switch ($var(rc)) {
            case -1:
            case -3:
                send_reply("404", "Not Found");
                exit;
            case -2:
                send_reply("405", "Method Not Allowed");
                exit;
        }
    }

    # when routing via usrloc, log the missed calls also
    if (is_method("INVITE")) {
        setflag(FLT_ACCMISSED);
    }

    route(RELAY);
    exit;
}

# =========================================
# Presence server processing
# =========================================
route[PRESENCE] {
    if(!is_method("PUBLISH|SUBSCRIBE")) return;

    if(is_method("SUBSCRIBE") && $hdr(Event)=="message-summary") {
        route(TOVOICEMAIL);
        # returns here if no voicemail server is configured
        sl_send_reply("404", "No voicemail service");
        exit;
    }

#!ifdef WITH_PRESENCE
#!ifdef WITH_MSGREBUILD
    # apply changes in case the request headers or body were modified
    msg_apply_changes();
#!endif
    if (!t_newtran()) {
        sl_reply_error();
        exit;
    }

    if(is_method("PUBLISH")) {
        handle_publish();
        t_release();
    } else if(is_method("SUBSCRIBE")) {
        handle_subscribe();
        t_release();
    }
    exit;
#!endif

    # if presence enabled, this part will not be executed
    if (is_method("PUBLISH") || $rU==$null) {
        sl_send_reply("404", "Not here");
        exit;
    }
    return;
}

##########################################
# IP authorization and user authentication
##########################################
route[AUTH] {
#!ifdef WITH_AUTH

#!ifdef WITH_IPAUTH
    if((!is_method("REGISTER")) && allow_source_address()) {
        # source IP allowed
        return;
    }
#!endif

    if (is_method("REGISTER") || from_uri==myself) {
        # authenticate requests
        if (!auth_check("$fd", "subscriber", "1")) {
            auth_challenge("$fd", "0");
            exit;
        }
        # user authenticated - remove auth header
        if(!is_method("REGISTER|PUBLISH"))
            consume_credentials();
    }
    # if caller is not local subscriber, then check if it calls
    # a local destination, otherwise deny, not an open relay here
    if (from_uri!=myself && uri!=myself) {
        sl_send_reply("403","Not relaying");
        exit;
    }

#!else

    # authentication not enabled - do not relay at all to foreign networks
    if(uri!=myself) {
        sl_send_reply("403","Not relaying");
        exit;
    }

#!endif
    return;
}

# =========================================
# Caller NAT detection
# =========================================
route[NATDETECT] {
    force_rport();
    if (nat_uac_test("19")) {
        if (is_method("REGISTER")) {
            fix_nated_register();
        } else {
            if(is_first_hop()) {
                set_contact_alias();
            }
        }
        setflag(FLT_NATS);
    }
    return;
}

##########################################################
# RTPProxy control and signaling updates for NAT traversal
##########################################################
route[NATMANAGE] {
    if (is_request()) {
        if(has_totag()) {
            if(check_route_param("nat=yes")) {
                setbflag(FLB_NATB);
            }
            
        if (check_route_param("rtp=bridge")) {
			setbflag(FLB_BRIDGE);
		}

		if (check_route_param("rtp=ws")) {
			setbflag(FLB_RTPWS);
		}
        }
    }
    if ( !(isflagset(FLT_NATS) || isbflagset(FLB_NATB) || isbflagset(FLB_RTPWS))) { 
       return; 
    }

    $xavp(r=>$T_branch_idx) = "replace-origin replace-session-connection";
    
    if(nat_uac_test("8")) {
        $xavp(r=>$T_branch_idx) = $xavp(r=>$T_branch_idx) + " trust-address";
    } 

    if (is_request()) {
		if (!t_is_failure_route()) {
			$avp(extra_id) = @via[1].branch + $T_branch_idx;
			$xavp(r=>$T_branch_idx) = $xavp(r=>$T_branch_idx) + " via-branch=extra";
            }
        }
    }
    if (is_reply()) {
        $avp(extra_id) = @via[2].branch + $T_branch_idx;
        $xavp(r=>$T_branch_idx) = $xavp(r=>$T_branch_idx) + " via-branch=extra";
    }

    if (isbflagset(FLB_RTPWS)) {
        if ($proto =~ "ws") { # web --> SIP
            $xavp(r=>$T_branch_idx) = $xavp(r=>$T_branch_idx) + " rtcp-mux-demux DTLS=off SDES-off ICE=remove RTP/AVP";
        } else { # SIP --> web
            $xavp(r=>$T_branch_idx) = $xavp(r=>$T_branch_idx) + " rtcp-mux-offer generate-mid DTLS=passive SDES-off ICE=force RTP/SAVPF";
        }
    } else {
        if ($proto =~ "ws") { # web --> web
            $xavp(r=>$T_branch_idx) = $xavp(r=>$T_branch_idx) + " generate-mid DTLS=passive SDES-off ICE=force";
        }
        # else {
            # $xavp(r=>$T_branch_idx) = $xavp(r=>$T_branch_idx) + "";
        # }
}

xlog("L_INFO", "NATMANAGE branch_id:$T_branch_idx ruri: $ru, method:$rm, status:$rs, extra_id: $avp(extra_id), rtpengine_manage: $xavp(r=>$T_branch_idx)\n");

rtpengine_manage($xavp(r=>$T_branch_idx));

if (is_request()) {
	if (!has_totag()) {
		if (t_is_branch_route()) {
			if (isbflagset(FLB_NATB)) {
				add_rr_param(";nat=yes");
			}
			if (isbflagset(FLB_BRIDGE)) {
				add_rr_param(";rtp=bridge");
			}
			if (isbflagset(FLB_RTPWS)) {
				add_rr_param(";rtp=ws");
			}
		}
	}
}
if (is_reply()) {
	if (isbflagset(FLB_NATB)) {
		if (is_first_hop()) {
			if (af == INET) {
				set_contact_alias();
			}
		}
	}
}


return;
}

################################
# URI update for dialog requests
################################
route[DLGURI] {
    if(!isdsturiset()) {
        handle_ruri_alias();
    }
    return;
}

############################
# Routing to foreign domains
############################
route[SIPOUT] {
    if (uri==myself) return;
    append_hf("P-Hint: outbound\r\n");
    route(RELAY);
    exit;
}

#####################
### REMOVE IN TESTING
# PSTN GW routing
#####################
route[PSTN] {
    return;
}

##############################
# JSONRPC over HTTP(S) routing
##############################
#!ifdef WITH_JSONRPC
event_route[xhttp:request] {
    set_reply_close();
    set_reply_no_connect();
    if(src_ip!=127.0.0.1) {
        xhttp_reply("403", "Forbidden", "text/html",
                "<html><body>Not allowed from $si</body></html>");
        exit;
    }
    if ($hu =~ "^/RPC") {
        jsonrpc_dispatch();
        exit;
    }

    xhttp_reply("200", "OK", "text/html",
                "<html><body>Wrong URL $hu</body></html>");
    exit;
}
#!endif

# =========================================
# Routing to voicemail server
# =========================================
route[TOVOICEMAIL] {
#!ifdef WITH_VOICEMAIL
    if(!is_method("INVITE|SUBSCRIBE")) return;

    # check if VoiceMail server IP is defined
    if (strempty($sel(cfg_get.voicemail.srv_ip))) {
        xlog("SCRIPT: VoiceMail routing enabled but IP not defined\n");
        return;
    }
    if(is_method("INVITE")) {
        if($avp(oexten)==$null) return;

        $ru = "sip:" + $avp(oexten) + "@" + $sel(cfg_get.voicemail.srv_ip)
                + ":" + $sel(cfg_get.voicemail.srv_port);
    } else {
        if($rU==$null) return;

        $ru = "sip:" + $rU + "@" + $sel(cfg_get.voicemail.srv_ip)
                + ":" + $sel(cfg_get.voicemail.srv_port);
    }
    route(RELAY);
    exit;
#!endif

    return;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
    xlog("L_INFO", "MANAGE_BRANCH: New branch [$T_branch_idx] to $ru\n");
    t_on_branch_failure("rtpengine");

#!ifndef WITH_BRIDGE_ON_FAIL
    setbflag(FLB_BRIDGE);
#!endif
    route(BRIDGING);        
    route(NATMANAGE);
}

# Manage incoming replies
reply_route {
    if(!sanity_check("17604", "6")) {
        xlog("Malformed SIP response detected by SANITY CHECK from $si:$sp\n");
        drop;
    }
}

# Manage incoming replies in transaction context
onreply_route[MANAGE_REPLY] {
    xdbg("incoming reply\n");
    if(status=~"[12][0-9][0-9]") {
        route(NATMANAGE);
    }
}

##############################
# Manage failure routing cases
##############################
failure_route[MANAGE_FAILURE] {
    xlog("L_INFO", "Failure: $rs");
}

#!ifdef WITH_WEBSOCKETS
onreply_route {
    if ((($Rp == MY_WS_PORT || $Rp == MY_WSS_PORT)
        && !(proto == WS || proto == WSS))) {
        xlog("L_WARN", "SIP response received on $Rp\n");
        drop;
    }

    if (nat_uac_test(64)) {
        # Do NAT traversal stuff for replies to a WebSocket connection
        # - even if it is not behind a NAT!
        # This won't be needed in the future if Kamailio and the
        # WebSocket client support Outbound and Path.
        add_contact_alias();
    }
}

   event_route[tm:branch-failure:rtpengine] {
    xlog("L_INFO", "BRANCH FAILED: $sel(via[1].branch) + $T_branch_idx");

#!ifdef WITH_BRIDGE_ON_FAIL
    if (!isbflagset(FLB_BRIDGE) && t_check_status("415|488")) {
        t_reuse_branch();
        setbflag(FLB_BRIDGE);
        xlog("L_INFO", "event_route[branch-failure:rtpengine]: trying again\n");

        route(RELAY);
    } else {
        $avp(extra_id) = @via[1].branch + $T_branch_idx;
        rtpengine_delete("via-branch=extra");
        xlog("L_INFO", "event_route[branch-failure:rtpengine]: failed\n");
    }
#!else
    $avp(extra_id) = @via[1].branch + $T_branch_idx;
    rtpengine_delete("via-branch=extra");
#!endif
}

event_route[xhttp:request] {
    set_reply_close();
    set_reply_no_connect();

    if ($Rp != MY_WS_PORT
#!ifdef WITH_TLS
        && $Rp != MY_WSS_PORT
#!endif
    ) {
        xlog("L_WARN", "HTTP request received on $Rp\n");
        xhttp_reply("403", "Forbidden", "", "");
        exit;
    }

xlog("L_INFO", "HTTP Request Received\n");

if ($hdr(Upgrade) =~ "websocket"
	&& $hdr(Connection) =~ "Upgrade"
	&& $rm =~ "GET"
) {

	# Validate Host - make sure the client is using the correct
	# alias for WebSockets
	if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
		xlog("L_WARN", "Bad host $hdr(Host)\n");
		xhttp_reply("403", "Forbidden", "", "");
		exit;
	}

	# Optional... validate Origin - make sure the client is from an
	# authorised website.	For example,
	#
	# if ($hdr(Origin) != "https://example.com"
	#	&& $hdr(Origin) != "https://example.com") {
	#	xlog("L_WARN", "Unauthorised client $hdr(Origin)\n");
	#	xhttp_reply("403", "Forbidden", "", "");
	#	exit;
	# }

	# Optional... perform HTTP authentication

	# ws_handle_handshake() exits (no further configuration file
	# processing of the request) when complete.
	if (ws_handle_handshake()) {
		# Optional... cache some information about the
		# successful connection
		exit;
	}
}

xhttp_reply("404", "Not Found", "", "");
}

event_route[websocket:closed] {
    xlog("L_INFO", "WebSocket connection from $si:$sp has closed\n");
}

#!ifdef WITH_BLOCK3XX
    # block call redirect based on 3xx replies.
    if (t_check_status("3[0-9][0-9]")) {
        t_reply("404","Not found");
        exit;
    }
#!endif

#!ifdef WITH_BLOCK401407
    # block call redirect based on 401, 407 replies.
    if (t_check_status("401|407")) {
        t_reply("404","Not found");
        exit;
    }
#!endif

#!ifdef WITH_VOICEMAIL
    # serial forking
    # - route to voicemail on busy or no answer (timeout)
    if (t_check_status("486|408")) {
        $du = $null;
        route(TOVOICEMAIL);
        exit;
    }
#!endif
}

