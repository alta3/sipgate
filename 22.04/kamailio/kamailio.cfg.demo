#!KAMAILIO
#
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
########################################################################
###################### ENABLE / DISABLE FEATURES #######################
########################################################################
#
# Enable features by placing '#!define' in front of any major VAR
#
# *** To run in debug mode: 
#     define WITH_DEBUG
#
# *** To enable mysql: 
#!define WITH_MYSQL
#
# *** To enable authentication execute:
#     - enable mysql
#!define WITH_AUTH
#     - add users using 'kamctl'
#
# *** To enable IP authentication execute:
#     - enable mysql
#     - enable authentication
#!define WITH_IPAUTH
#     - add IP addresses with group id '1' to 'address' table
#
# *** To enable persistent user location execute:
#     - enable mysql
#!define WITH_USRLOCDB
#
# *** To enable presence server execute:
#     - enable mysql
#!define WITH_PRESENCE
#
# *** To enable nat traversal execute:
#     - define WITH_NAT
#     - install RTPProxy: http://www.rtpproxy.org
#     - start RTPProxy:
#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722
#
# *** To enable PSTN gateway routing execute:
#     - define WITH_PSTN
#     - set the value of pstn.gw_ip
#     - check route[PSTN] for regexp routing condition
#
# *** To enable database aliases lookup execute:
#     - enable mysql
#!define WITH_ALIASDB
#
# *** To enable use of the dialplan MYSQL routing
#!define WITH_DIALPLAN
#
# *** To enable multi-domain support execute:
#     - enable mysql
#!define WITH_MULTIDOMAIN
#
# *** To enable TLS support execute:
#     - adjust CFGDIR/tls.cfg as needed
#     - define WITH_TLS
#
# *** To enable XMLRPC support execute:
#     - define WITH_XMLRPC
#     - adjust route[XMLRPC] for access policy
#
# *** To enable anti-flood detection execute:
#     - adjust pike and htable=>ipban settings as needed (default is
#       block if more than 16 requests in 2 seconds and ban for 300 seconds)
#     - define WITH_ANTIFLOOD
#
# *** To enhance accounting execute:
#     - enable mysql
#     - define WITH_ACCDB
#     - add following columns to database
#!ifdef ACCDB_COMMENT
  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
#!endif

########################################################################
###################### Defined Values ##################################
########################################################################
#
# *** Value defines - IDs used later in config
#
#!ifdef WITH_MYSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
#!define DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
#!endif
#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif
#
# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

########################################################################
###################### Global Parameters ###############################
########################################################################
#
# Set Global Parameters that have an affect entire build 
#
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=4

/* uncomment the next line to disable TCP (default on) */
# disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on reverse DNS on IPs (default on) */
# auto_aliases=no

/* add local domain aliases */
# alias="sip.mydomain.com"

server_header="Server: Kamailio Server in arinc core"

/* uncomment and configure the following line if you want Kamailio to 
   bind on a specific interface/port/proto (default bind on all available) */
listen=udp:10.25.110.225:5060

/* port to listen to
 * - can be specified more than once if needed to listen on many ports */
port=5060

#!ifdef WITH_TLS
enable_tls=yes
#!endif

########################################################################
######################### Custom Parameters ############################
########################################################################
#
# These parameters can be modified runtime via RPC interface
# - see the documentation of 'cfg_rpc' module.
#
# Format: group.id = value 'desc' description
# Access: $sel(cfg_get.group.id) or @cfg_get.group.id
#

#!ifdef WITH_PSTN
# PSTN GW Routing

# - pstn.gw_ip: valid IP or hostname as string value, example:
# pstn.gw_ip = "10.0.0.101" desc "My PSTN GW Address"
#
# - by default is empty to avoid misrouting
pstn.gw_ip = "" desc "PSTN GW Address"
#!endif

########################################################################
########################## Modules Section #############################
########################################################################
#
# All loadmodule commands can be found in this section
# This section also sets paths to location of modules
#!ifdef LOCAL_TEST_RUN
#
mpath="modules_k:modules"
#!else
#mpath="/usr/lib/kamailio/modules_k/:/usr/lib/kamailio/modules/"
mpath="/lib/kamailio/modules_k/:/lib64/kamailio/modules/"

#!endif

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "lcr.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"
loadmodule "avpops.so"
loadmodule "dialplan.so"
loadmodule "mi_datagram.so" # this is a module to autoupdate SIREMIS
loadmodule "regex.so" # this is a module to translate with regular expression <- needs to be made active
loadmodule "pdt.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!endif

#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpproxy.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc.so"
#!endif


########################################################################
################## SET MODULE SPECIFIC PARAMETERS ######################
########################################################################
#
# All modparam commands can be found in this section
#

# ----- mi_fifo params -----
modparam("mi_fifo", "fifo_name", "/tmp/kamailio_fifo")


# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)


# ----- rr params -----
modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)


# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
# modparam("registrar", "max_contacts", 10)


# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)

/* by default ww do not adjust the direct of the sequential requests.	*/
/*   if you enable this parameter, be sure the enable "append_fromtag"	*/
/*   in "rr" module 													*/
modparam("acc", "detect_direction", 0)

/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra", "src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)

/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif


# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif


# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)
#!endif


# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif


# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif


# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
# use caching
# modparam("domain", "db_mode", 1)
# register callback to match myself condition with domains list
modparam("domain", "register_myself", 1)
#!endif


#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif


#!ifdef WITH_NAT
# ----- rtpproxy params -----
modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif


#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC")
modparam("xmlrpc", "url_match", "^/RPC")
#!endif


#--------- avpops params --------
# Next 10 lines of code added by RZFeeser 02.23.2011 10:47am
#
#!ifdef WITH_DIALPLAN
modparam("avpops", "db_url", DBURL)
modparam("avpops", "avp_table", "usr_preferences")
#--------- load the dpid field to a pseudo-vairable $avp(s:dpid) ------
# modparam ("auth_db", "load_credentials", "$avp(s:rpid)=rpid ;$avp(s:countrycode)=countrycode;$avp(s:areacode)=areacode")
modparam ("dialplan", "db_url", DBURL)
# attribute of the matched line will be stored in the $avp(s:dest)
modparam("dialplan", "attrs_pvar", "$avp(s:dest)")
#!endif

#---------- mi_datagram params ---------
# This sets params for mi_datagram to auto update siremis 2.0 dialplan
#
modparam ("mi_datagram", "socket_name", "udp:127.0.0.1:8033")

#---------- regex params ---------------
# This sets params for regex to enable the use of regular expression in mySQL database
# This code is still being 'tweaked' - do not consider the code below as working!!
# Entered by RZFeeser 2/24/2010 5:30pm
#
# modparam("regex", "file", "/etc/kamailio/regex_groups")
# modparam("regex", "pcre_multiline", 1)

#--- pdt params --- routing services ---
modparam ("pdt", "db_url", DBURL)
#
#

# ----------- lcr params -------------------
#
modparam("lcr", "db_url", DBURL)
# modparam("lcr", "gw_table", "lcr_gw")
# modparam("lcr", "gw_name_column", "gw_name")
# modparam("lcr", "ip_addr_column", "ip_addr")
# modparam("lcr", "port_column", "port")
# modparam("lcr", "uri_scheme_column", "uri_scheme")
# modparam("lcr", "transport_column", "transport")
# modparam("lcr", "grp_id_column", "lcr_id")
# modparam("lcr", "lcr_table", "lcr_rule")
# modparam("lcr", "strip_column", "strip")
# modparam("lcr", "prefix_column", "prefix")
# modparam("lcr", "from_uri_column", "from_uri")
# modparam("lcr", "priority_column", "priority")
modparam("lcr", "flags_avp", "$avp(i:712)")
modparam("lcr", "gw_uri_avp", "$avp(i:1400)")
modparam("lcr", "ruri_user_avp", "$avp(i:1402)")
# modparam("lcr", "fr_inv_timer_avp", "$avp(s:fr_inv_timer_avp)")

# modparam("lcr", "rpid_avp", "$avp(s:rpid)")

# ----------- Max-Forward params -------------------
modparam("maxfwd", "max_limit", 70)

########################################################################
########################### Routing Logic ##############################
########################################################################
#
# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
#
route {
	
	route(REQINIT);         # Initial TTL and DOS attack checks
	
	route(NAT);             # NAT detection

	route(WITHINDLG);       # Handle requests in dialog
                                # only initial requests fall through (no To tag)
	
	route(CANCEL);          # CANCEL processing

	t_check_trans();        # Kill local ACKs

	route(AUTH);            # Perform Authentication
	
	route(RECORDROUTE);     # Handle Route headers. Record-route headers
	
	route(ACCOUNTING);      # Handle Accounting
	
	route(NOTME);           # dispatch all requests to foreign domains
                                # Only requests for my domains fall through
	
	route(PRESENCE);        # handle presence related requests

	route(REGISTRAR);       # handle registrations

	route(EMPTYDEST);       # Discard requests with no Username

	route(ALIAS);           # Weed out all the non-numeric phonecalls
                                # (alias calls within our domains)
    
	route(DIALPLAN);        # Perform sip URI adjustment
                                # Calls subroutines PSTN, LCR, EXT, ANNCR, PDT, PDTnRR, & VMAIL
								
	route(RELAY);
}

########################################################################
######################### route[ACCOUNTING] ############################
########################################################################
#
#
#
route[ACCOUNTING]{
	if(is_method("INVITE")){
		setflag(FLT_ACC);
}
}


########################################################################
######################### route[EMPTYDEST] #############################
########################################################################
#
#
#
route[EMPTYDEST] {
	if ($rU==$null){
		sl_send_reply("484","Address Incomplete");
		exit;
	}
}	

########################################################################
######################### route[RELAY] #################################
########################################################################
#
route[RELAY] 
{
	#!ifdef WITH_NAT
		if (check_route_param("nat=yes")) {
			setbflag(FLB_NATB);
		}
	if (isflagset(FLT_NATS) || isbflagset(FLB_NATB)) {
		route(RTPPROXY);
	}
	#!endif

	/* example how to enable some additional event routes */
	if (is_method("INVITE")) {
		#t_on_branch("BRANCH_ONE");
		t_on_reply("REPLY_ONE");
		t_on_failure("FAIL_ONE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}
 
########################################################################
######################## route[REQINIT] ################################
########################################################################
#
# Per SIP request initial checks
#
route[REQINIT] {
	#!ifdef WITH_ANTIFLOOD
		# flood dection from same IP and traffic ban for a while
		# be sure you exclude checking trusted peers, such as pstn gateways
		# - local host excluded (e.g., loop to self)

		if(src_ip!=myself){
			if($sht(ipban=>$si)!=$null){
				# ip is already blocked
				xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
				exit;
			}
			if (!pike_check_req()){
				xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
				$sht(ipban=>$si) = 1;
				exit;
			}
		}
	#!endif

	if(!mf_process_maxfwd_header("46")){
		sl_send_reply("483","Max-fwd to 0 at CORE proxy too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

########################################################################
########################## route[WITHINDLG] ############################
########################################################################
#
# Handle requests within SIP dialogs
#
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if (is_method("BYE")) {
				setflag(FLT_ACC); # do accounting ...
				setflag(FLT_ACCFAILED); # ... even if the transaction fails
			}
			route(RELAY);
		} else {
			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

########################################################################
############################# route[CANCEL] ############################
########################################################################
#
# Handle CANCEL - Subroutine created by RZFeeser on 02.22.2011
# Stops script if CANCEL is issued
#
route[CANCEL] {
	if (is_method("CANCEL"))
		{
			if (t_check_trans())     
				t_relay();
			exit;
		}
}

########################################################################
########################### route[REGISTRAR] ###########################
########################################################################
#
# Handle SIP registrations
#
route[REGISTRAR] {
	if (is_method("REGISTER"))
	{
		if(isflagset(FLT_NATS))
		{
			setbflag(FLB_NATB);
			# uncomment next line to do SIP NAT pinging 
			## setbflag(FLB_NATSIPPING);
		}
		if (!save("location"))
			sl_reply_error();

		exit;
	}
}

########################################################################
########################### route[ALIAS] ###############################
########################################################################
#
#
#

#!ifdef WITH_ALIASDB
	# search in DB-based aliases
    route[ALIAS] {
		if(alias_db_lookup("dbaliases")) {
			route(RELAY);
		}
	}	
#!endif


########################################################################
########################### route[EXT] ############################
########################################################################
#
# This subroutine replaces AOR (if found) with SIP REGISTERed Contact-URI
# This subroutine does not return 
route[EXT] {
       if (!lookup("location")) {
		switch ($rc) {
			case -1:   #-1 = no contact found
			case -3:   #-3 = internal error during processing
				t_newtran();
				t_reply("404", "Not Found in the dialplan of Core Kamailio ");
				exit;
			case -2:   #-2 = contact found but method not supported
				sl_send_reply("405", "We found the USER you are calling but the SIP REQUEST you sent is not allowed at CORE proxy");
				exit;
		}
	}
       record_route();           # Add record route headers
       add_rr_param(";EXT");     # For information only, indicate the function that added the rr
	# when routing via usrloc, log the missed calls also
	if (is_method("INVITE"))
	{
		setflag(FLT_ACCMISSED);
	}
}

########################################################################
########################### route[DIALPLAN] ############################
########################################################################
#
#
#
route[DIALPLAN] {
	xlog("THIS IS $$rU $rU");
	xlog("THIS IS THE REQUEST PRIOR TO DIALPLAN PROCESSING: $rm sip:$rU@$rd $$varx = $var(x)");
	#!ifdef WITH_DIALPLAN
		# If 
		if(!dp_translate("1","$rU/$rU")) {
			xlog("THIS IS THE RSIPOUTEQUEST AFTER DIALPLAN PROCESSING: $rm sip:$rU@$rd");
			send_reply("420", "Destination not in CORE PROXY DIALPLAN check DIALPLAN configuration");
			exit;
		}
		
		if ($avp(s:dest)=="PDT") {
			route(PDT);
		}

		if ($avp(s:dest)=="PDTnRR") {
			route(PDTnRR);
		}
		
		route(SIPOUT);
		xlog("THIS IS THE REQUEST AFTER DIALPLAN PROCESSING WORKED!: $rm sip:$rU@$rd");
		
		# If call falls through to this point, function call based on attributes


################## PSTN ########################
## This code was retired, and replaced by LCR ##
################################################
			if ($avp(s:dest)=="PSTN") {
			#route to pstn
				route(PSTN);		
			}

################################################

		if ($avp(s:dest)=="LCR") {
			#route to LCR
			route(LCR);		
		}
		
		if ($avp(s:dest)=="ANNCR") {
			#route to announcement server
			route(ANNCR);
		}
		
		if ($avp(s:dest)=="VMAIL") {
			#route to announcement server
			route(VMAIL);
		}
		
		if ($avp(s:dest)=="EXT") {
			#route to extention
			route(EXT);
		}
	
#!endif
return;
}

########################################################################
########################### route[PRESENCE] ############################
###################### Presence server route ###########################
########################################################################

route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE"))
		return;

#!ifdef WITH_PRESENCE
	if (!t_newtran())
	{
		sl_reply_error();
		exit;
	};

	if(is_method("PUBLISH"))
	{
		handle_publish();
		t_release();
	}
	else
	if( is_method("SUBSCRIBE"))
	{
		handle_subscribe();
		t_release();
	}
	exit;
#!endif
	
	# if presence en       record_route();           # Add record route headers
       add_rr_param(";PDT");  # For information only, indicate the function that added the rrabled, this part will not be executed
	if (is_method("PUBLISH") || $rU==$null)
	{
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}

########################################################################
######################### route[ANNCR] #################################
########################################################################
#
# Forward call to announcement
#
route[ANNCR] {
	xlog("THIS IS THE REQUEST PRIOR ANNCR PROCESSING: $rm sip:$rU@$rd");
	send_reply("501", "ANNOUNCER CODE NOT YET WRITTEN.");
	exit;
}

########################################################################
######################### route[VMAIL] #################################
########################################################################
route[VMAIL] {
	xlog("THIS IS THE REQUEST PRIOR VMAIL PROCESSING: $rm sip:$rU@$rd");
	send_reply("501", "VMAIL CODE NOT YET WRITTEN.");
	exit;
}

########################################################################
######################### route[AUTH] ##################################
########################################################################
#
# Authentication route
#
route[AUTH] {
#!ifdef WITH_AUTH
	if (is_method("REGISTER"))
	{
		# authenticate the REGISTER requests (uncomment to enable auth)
		if (!www_authorize("$td", "subscriber")){					
			xlog("SIP Request: method [$rm] from [$fu] to [[$tu] auth return [$rc]\n");
			www_challenge("$td", "0");
			exit;
		}

		if ($au!=$tU)
		{
			sl_send_reply("403","Forbidden auth ID");
			exit;
		}
	} else {

#!ifdef WITH_IPAUTH
		if(allow_source_address())
		{
			# source IP allowed
			return;
		}
#!endif

		# authenticate if from local subscriber
		if (from_uri==myself)
		{
			if (!proxy_authorize("$fd", "subscriber")) {
				proxy_challenge("$fd", "0");
				exit;
			}
			if (is_method("PUBLISH"))
			{
				if ($au!=$tU) {
					sl_send_reply("403","Forbidden auth ID");
					exit;
				}
			} else {
				if ($au!=$fU) {
					sl_send_reply("403","Forbidden auth ID");
					exit;
				}
			}

			consume_credentials();
			# caller authenticated
		} else {
			# caller is not local subscriber, then check if it calls
			# a local destination, otherwise deny, not an open relay here
			if (!uri==myself)
			{
				sl_send_reply("403","Not relaying");
				exit;
			}
		}
	}
#!endif
	return;
}

########################################################################
######################### route[RecordRoute] ###########################
########################################################################
#
#
#
route[RECORDROUTE] {
	remove_hf("Route");                          # strip preloaded route headers
	if (is_method("INVITE|SUBSCRIBE"))           # Only SIP methods worthy of record route
#	      record_route();                        # Add record route headers
#            add_rr_param(";RR");                # For information only, indicate the function that added the rr
		return;
}

########################################################################
########################### route[PDT] #################################
########################################################################
#
#
#
route[PDT] {
	prefix2domain("2","2");   # Check source domain for match, don't modify prefix, change destination domain
       record_route();           # Add record route headers
       add_rr_param(";PDT");     # Informational only, indicate the function that added the rr
	return;
}

########################################################################
########################### route[PDTnRR] #################################
########################################################################
#
#
#
route[PDTnRR] {
	prefix2domain("2","2");  
	append_hf("P-Pod-Hint: PDTnRR attribute set, so no Record-Route added by CORE kamailio\r\n");  # Info only, indicates no record-route is intentional
	return;
}


########################################################################
######################### route[NAT] ###################################
########################################################################
#
# Caller NAT detection route
#
route[NAT] {  
#!ifdef WITH_NAT
	force_rport();
	if (nat_uac_test("19")) {
		if (method=="REGISTER") {
			fix_nated_register();
		} else {
			fix_nated_contact();
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

########################################################################
######################### route[RTPPROXY] ##############################
########################################################################
#
# RTPProxy control
#
route[RTPPROXY] {
#!ifdef WITH_NAT
	if (is_method("BYE")) {
		unforce_rtp_proxy();
	} else if (is_method("INVITE")){
		force_rtp_proxy();
	}
	if (!has_totag()) add_rr_param(";nat=yes");
#!endif
	return;
}

########################################################################
######################### route[NOTME] ################################
########################################################################
#
# Routing to foreign domains only, does nothing if REQ-URI is this domain
#
route[NOTME] {
	if (!uri==myself)
	{
              record_route();          # Add record route headers
              add_rr_param(";NOTME");  # Informational only, Indicate the function that added the rr
		route(RELAY);
	}
}

########################################################################
######################### route[SIPOUT] ################################
########################################################################
#
# Routing to foreign domains only, does nothing if REQ-URI is this domain
#
route[SIPOUT] {
	if (!uri==myself)
	{
		route(RELAY);
	}
}


########################################################################
######################### route[PSTN] ##################################
########################################################################
#
# PSTN GW routing
#
 route[PSTN] {

	xlog("THIS IS THE REQUEST PRIOR PSTN PROCESSING: $rm sip:$rU@$rd");
	send_reply("501", "PSTN CODE NOT YET WRITTEN.");
	exit;
	
 #!ifdef WITH_PSTN
	# check if PSTN GW IP is defined
	if (strempty($sel(cfg_get.pstn.gw_ip))) {
		xlog("SCRIPT: PSTN rotuing enabled but pstn.gw_ip not defined\n");
		return;
	}

	# route to PSTN dialed numbers starting with '+' or '00'
	#     (international format)
	# - update the condition to match your dialing rules for PSTN routing
	if(!($rU=~"^(\+|00)[1-9][0-9]{3,20}$"))
	
	# only local users allowed to call
	if(from_uri!=myself) {
		sl_send_reply("403", "Not Allowed");
		exit;
	}

	$ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip);

	route(RELAY);
	exit;
 #!endif

	return;
}

########################################################################
######################### route[LCR] ###################################
########################################################################
# LCR
# Takes place of PSTN - alter dropdown table to read 'LCR' and not PSTN
# in diaplan attributes.
#
# Dropdown menu maybe altered in var.www.siremis-2.0.0.siremis.modules.ser.common.select(values.xml)
#
route[LCR] {

	if (!load_gws("1", "$var(caller_uri)")) {
		sl_send_reply("500", "Server Internal Error - Cannot load gateways");
#		break;
	}


#	if(!load_gws()){
#		sl_send_reply("500", "Internal server error, unable to load gateways");
#		break;
# if(!next_gw()){
#		sl_send_reply("503", "Service not available, no gateways found");
#		break;
#	}
}


########################################################################
######################### route[XMLRPC] ################################
########################################################################
# XMLRPC routing
#!ifdef WITH_XMLRPC
route[XMLRPC]
{
	# allow XMLRPC from localhost
	if ((method=="POST" || method=="GET")
			&& (src_ip==127.0.0.1)) {
		# close connection only for xmlrpclib user agents (there is a bug in
		# xmlrpclib: it waits for EOF before interpreting the response).
		if ($hdr(User-Agent) =~ "xmlrpclib")
              record_route();        # Add record route headers
              add_rr_param(";PDT");  # For information only, indicate the function that added the rrset_reply_close();
		set_reply_no_connect();
		dispatch_rpc();
		exit;
	}
	send_reply("403", "Forbidden");
	exit;
}
#!endif

# Sample branch router
branch_route[BRANCH_ONE] {
	xdbg("new branch at $ru\n");
}

# Sample onreply route
onreply_route[REPLY_ONE] {
	xdbg("incoming reply\n");
#!ifdef WITH_NAT
	if ((isflagset(FLT_NATS) || isbflagset(FLB_NATB))
			&& status=~"(183)|(2[0-9][0-9])") {
		force_rtp_proxy();
	}
	if (isbflagset("6")) {
		fix_nated_contact();
	}
#!endif
}

# Sample failure route
failure_route[FAIL_ONE] {
#!ifdef WITH_NAT
	if (is_method("INVITE")
			&& (isbflagset(FLB_NATB) || isflagset(FLT_NATS))) {
		unforce_rtp_proxy();
	}
#!endif

	if (t_is_canceled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

	# uncomment the following lines if you want to redirect the failed 
	# calls to a different new destination
	##if (t_check_status("486|408")) {
	##	sethostport("192.168.2.100:5060");
	##	append_branch();
	##	# do not set the missed call flag again
	##	t_relay();
	##}
}
