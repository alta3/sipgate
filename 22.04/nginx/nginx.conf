user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

load_module /usr/lib/nginx/modules/ngx_stream_module.so;
events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}

stream {
    log_format basic '$remote_addr [$time_local] '
                     '$protocol $status $bytes_sent $bytes_received '
                     '$session_time';

    access_log  /var/log/nginx/stream.log basic;
    error_log /var/log/nginx/stream-error.log debug;

     # === IPv4:80 ================================================================           
     # Separate IPv4:80 into either http or turn streams based on detected protocol

    upstream turns_ipv4_80 {
        server 10.16.1.195:3479;
    }

    upstream http_ipv4_80 {
        server 127.0.0.1:3480;
    }

     # PREREAD ROUTING DONE HERE:
     # if ANY        protocol is detected during preread, route stream to TURN,
     # if "" (empty) protocol is detected during preread, route stream to HTTP

    map $ssl_preread_protocol $upstream_ipv4_80 {
        default turns_ipv4_80;
        ""      http_ipv4_80;
    }

     # == IPv6:80 =================================================================
     # Separate IPv6:80 into either http or turn streams based on detected protocol
     # Identical logic as above block

    upstream turns_ipv6_80 {
        server [fe80::20c:29ff:fead:8b42]:3479;
    }

    upstream http_ipv6_80 {
        server [::1]:3480;
    }

    map $ssl_preread_protocol $upstream_ipv6_80 {
        default turns_ipv6_80;
        ""      http_ipv6_80;
    }

     # == IPv4:443 =================================================================
     # Separate IPv4:443 into either http or turn streams based on detected protocol
     # Identical logic as above block

    upstream turn_ipv4_443 {
        server 10.16.1.195:3478;
    }

    upstream https_ipv4_443 {
        server 127.0.0.1:3443;
    }

    map $ssl_preread_protocol $upstream_ipv4_443 {
        default https_ipv4_443;
        "" turn_ipv4_443;
    }

     # == IPv6:443 =================================================================
     # Separate IPv6:443 into either http or turn streams based on detected protocol
     # Identical logic as above block

    upstream turn_ipv6_443 {
        server [fe80::20c:29ff:fead:8b42]:3478;
    }

    upstream https_ipv6_443 {
        server [::1]:3443;
    }

    map $ssl_preread_protocol $upstream_ipv6_443 {
        default https_ipv6_443;
        ""      turn_ipv6_443;
    }

     # ===========================================================================
     # Turn ssl_preread on for all upstreams specified above
     # Set buffer tp 16k

    server {
        listen 80;
        proxy_pass $upstream_ipv4_80;
        ssl_preread on;
        proxy_buffer_size 16k;
    }

    server {
        listen [::]:80;
        proxy_pass $upstream_ipv6_80;
        ssl_preread on;
        proxy_buffer_size 16k;
    }

    server {
        listen 443;
        proxy_pass $upstream_ipv4_443;
        ssl_preread on;
        proxy_buffer_size 16k;
    }

    server {
        listen [::]:443;
        proxy_pass $upstream_ipv6_443;
        ssl_preread on;
        proxy_buffer_size 16k;
    }
} 
