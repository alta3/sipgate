---
- name: connectivity and fact gathering
  hosts: sipgate
  gather_facts: True
  vars:
    VER: "1.0.4"
  roles:
   - name: timesyncd

  tasks:
  - name: Install an SSL cert, kamailio dependencies
    apt:
      pkg:
        - certbot
        - build-essential
        - tree
        - perl
        - libperl-dev
        - libgd3
        - libgd-dev
        - libgeoip1
        - libgeoip-dev
        - geoip-bin
        - libxml2
        - libxml2-dev
        - libxslt1.1
        - libxslt1-dev
        - gcc 
        - g++
        - flex
        - bison
        - libmysqlclient-dev
        - make
        - libcurl4-openssl-dev
        - libssl-dev
        - libxml2-dev
        - libpcre3-dev
        - libunistring-dev
        - mysql-server
        - libsctp-dev
        - mysql-client
        - python3-pymysql
    become: True

#  - name: Tell certbot to create a cert.
#    shell: sudo certbot certonly --standalone -d sipgate.alta3.com

  - name: Create web root
    file:
      path: /var/www/html/
      owner: root
      group: root
      mode: '0755'
      state: directory
    become: True

  - name: Install js config file - should be a template
    template:
      src: config.js
      dest: /var/www/html/config
      owner: root
      group: root
      mode: '0750'
    become: True

  - name: Install sip js client
    copy:
      src: 'client/{{item}}'
      dest: '/var/www/html/{{item}}'
    loop:
      - asset-manifest.json
      - config.js
      - favicon.ico
      - index.html
      - manifest.json
      - precache-manifest.2da2d0d268e58779c701c9f88d99aed8.js
      - service-worker.js
      - static/
    become: True

  - name: Install user nginx
    user:
      name: nginx
    become: True

  - name: Install nginx from source, we need modules available only by compiling. Download the tarballs...
    get_url:
      url: https://nginx.org/download/nginx-1.16.1.tar.gz
      dest: ~/nginx-1.16.1.tar.gz

  - name: Download PCRE version 8.42
    get_url:
      url: https://ftp.exim.org/pub/pcre/pcre-8.42.tar.gz
      dest: ~/pcre-8.42.tar.gz

  - name: Download zlib version 1.2.11
    get_url:
      url: https://zlib.net/fossils/zlib-1.2.11.tar.gz
      dest: ~/zlib-1.2.11.tar.gz

  - name: Download OpenSSL version 1.1.0h
    get_url:
      url: https://www.openssl.org/source/openssl-1.1.0h.tar.gz
      dest: ~/

  - name: untar files
    unarchive:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      remote_src: True
    loop:
      - { src: ~/nginx-1.16.1.tar.gz,    dest: ~/ }
      - { src: ~/pcre-8.42.tar.gz,       dest: ~/ }
      - { src: ~/zlib-1.2.11.tar.gz,     dest: ~/ }
      - { src: ~/openssl-1.1.0h.tar.gz,  dest: ~/ }

  - name: Remove the tarballs as they are no longer needed.
    file: 
      state: absent
      path: ~/*.tar.gz
    become: True

  - name: Copy NGINX manual page to /usr/share/man/man8/ directory
    copy:
      src: /home/ubuntu/nginx-1.16.1/man/nginx.8
      dest: /usr/share/man/man8
      remote_src: yes
    become: True

  - name: gzip it
    archive:
      path: /usr/share/man/man8/nginx.8
      dest: /usr/share/man/man8/nginx.8.gz
      format: gz
    become: True

  - name: Build the whole nine yards. The following is ONE LINE OF CODE ....
    shell: ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --user=nginx --group=nginx --build=Ubuntu --builddir=nginx-1.16.1 --with-select_module --with-poll_module --with-threads --with-file-aio --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_auth_request_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-http_perl_module=dynamic --with-perl_modules_path=/usr/share/perl/5.26.1 --with-perl=/usr/bin/perl --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-mail=dynamic --with-mail_ssl_module --with-stream=dynamic --with-stream_ssl_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-stream_ssl_preread_module --with-compat --with-pcre=../pcre-8.42 --with-pcre-jit --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-1.1.0h --with-openssl-opt=no-nextprotoneg --with-debug
    args:
       chdir: ~/nginx-1.16.1

  - name: Run make
    make:
      chdir: /home/ubuntu/nginx-1.16.1
      target: install
    become: True

  - name: Create NGINX directories and set permissions
    file:
      path: '{{ item }}'
      state: directory
      owner: root
      group: root
      mode: '0700'
    loop:
      - /var/cache/nginx/client_temp 
      - /var/cache/nginx/fastcgi_temp 
      - /var/cache/nginx/proxy_temp 
      - /var/cache/nginx/scgi_temp
      - /var/cache/nginx/uwsgi_temp
    become: True

  - name: Create NGINX systemd unit file.
    template:
      src: nginx/etc/systemd/system/nginx.service
      dest: /etc/systemd/system/nginx.service
      owner: root 
      group: root 
      mode: '0755'
    become: True

  - name: enable and start nginx
    systemd:
      name: nginx.service
      state: started
      enabled: yes
      daemon_reload: yes
    become: True

  - name: Secure the mysql installation (this is a mysql parameter)
    mysql_db:
      name: sipgate
      state: present
      login_password: kam12345
      login_user: root
      login_unix_socket: /var/run/mysqld/mysqld.sock
    become: True

  - name: Install mysql config
    copy:
      src: kamailio/mysqld.cnf 
      dest: /etc/mysql/mysql.conf.d/mysqld.cnf
      owner: root
      group: root
      mode: '0750'
    become: True

  - name: Restart mysql
    systemd:
      name: mysql
      state: restarted
    become: True

  - name: Create dir for github repos
    file:
      state: directory
      name: ~/github
      owner: '{{ ansible_user }}'
      group: '{{ ansible_user }}'
      mode: '0750'
      mode: '0755'
 
  - name: clone kamailio
    git:
      repo: https://github.com/kamailio/kamailio
      dest: ~/github/kamailio
 
  - name: drop back to 5.1
    shell: 
      cmd: make cfg
    args:
      chdir: ~/github/kamailio

  - name: copy the modules list
    copy:
      src: kamailio/modules.lst
      dest: ~/github/kamailio/src/modules.lst
 
  - name: make cfg file
    shell: make include_modules="db_mysql dialplan presence regex websocket rtpengine tls sctp" cfg
    args:
       chdir: ~/github/kamailio
 
  - name: make all
    make:
      target: all
      chdir: /home/ubuntu/github/kamailio
    become: True
  
  - name: make install
    make:
      target: install 
      chdir: /home/ubuntu/github/kamailio/src/
    become: True
  
  - name: Copy the kamctlrc file to the workspace
    copy: 
      src: kamailio/kamctlrc
      dest: /usr/local/etc/kamailio/kamctlrc
    become: True
 
  - name: Copy the database
    copy:
      src: ~/sipgate/kamailio/kamailio.cfg
      dest: /usr/local/etc/kamailio/kamailio.cfg
    become: True

#  - name: Create kamailio db
#    shell: sudo /usr/local/sbin/kamdbctl create
 
  - name: deploy kamailio cfg file
    copy:
      src: kamailio/kamailio.cfg
      dest: /usr/local/etc/kamailio/kamailio.cfg
    become: True

  - name: Copy init script
    copy:
      src: kamailio/kamailio.init
      dest: /etc/init.d/kamailio
    become: True
 
  - name: install kamalio defaults
    copy:
      src: ~/sipgate/kamailio/kamailio.default
      dest: /etc/default/kamailio
      owner: root
      group: root
      mode: '0644'
    become: True
 
  - name: create pid file dir
    file:
      path: /var/run/kamailio
      state: directory
      owner: root
      group: root
      mode: '0755'
    become: True
 
  - name: Add kamailio user
    user:
      name: kamailio
      home: /var/run/kamailio
      shell: /bin/false
    become: True

  - name: fix the "chown" issue for above
    file:
      path: /var/run/kamailio
      owner: kamailio
      group: kamailio
    become: True      
 
  - name: Make /etc/kamalio directory
    file:
      path: /etc/kamailio
      state: directory
      owner: root
      group: root
      mode: '0755'
    become: True
 
  - name: Copy sipgate's tls.cfg into /etc/kamalio
    copy:
      src: ~/sipgate/kamailio/tls.cfg
      dest: /etc/kamailio/
      owner: kamailio
      group: root
      mode: '0750'
    become: True
 
  - name: clone rtpengine repo
    git: 
        repo: https://github.com/sipwise/rtpengine.git
        dest: ~/github
    become: True
    
  - name: Install RTP dependancies
    apt:
      pkg:
        - debhelper
        - init-system-helpers
        - default-libmysqlclient-dev
        - gperf
      # - iptables-dev
        - libmysqlclient-dev
        - libip4tc-dev
        - libip6tc-dev
        - libiptc-dev
        - libxtables-dev
        - libavcodec-dev
        - libavfilter-dev
        - libavformat-dev
        - libavutil-dev
        - libbencode-perl
        - libcrypt-openssl-rsa-perl
        - libcrypt-rijndael-perl
        - libhiredis-dev
        - libio-multiplex-perl
        - libio-socket-inet6-perl
        - libjson-glib-dev
        - libdigest-crc-perl
        - libdigest-hmac-perl
        - libnet-interface-perl
        - libnet-interface-perl
        - libssl-dev
        - libsystemd-dev
        - libxmlrpc-core-c3-dev
        - libcurl4-openssl-dev
        - libevent-dev
        - libpcap0.8-dev
        - markdown
        - unzip
        - nfs-common
        - dkms
        - libspandsp-dev
    become: True
 
  - name: G.729 codec is needed for the next step. Go get it!
    shell: curl https://codeload.github.com/BelledonneCommunications/bcg729/tar.gz/{{ VER }} >bcg729_{{ VER }}.orig.tar.gz
    args:  
      chdir: /home/ubuntu/github/rtpengine/
 
  - name: untar the code
    shell: tar zxf bcg729_{{ VER }}.orig.tar.gz
    args:
      chdir: /home/ubuntu/github/rtpengine/


  - name: Clone G.729 codec packager INSIDE the untarred bcg729_{{ VER }} directory
    git:
      repo: https://github.com/ossobv/bcg729-deb.git
      dest: /home/ubuntu/github/rtpengine/bcg729-{{ VER }}/debian
      version: v1.0.4-0osso3

  - name: Check dependancies - should be empty (TODO)
    shell: dpkg-checkbuilddeps
    args:
      chdir: /home/ubuntu/github/rtpengine/bcg729-{{ VER }}

  - name: Create the debian package - unsigned, unsigned changes, sanatize the environment
    shell: dpkg-buildpackage -us -uc -sa
    args:
      chdir: /home/ubuntu/github/rtpengine/bcg729-{{ VER }}
 
  - name: Install the debian package
    shell: sudo dpkg -i libbcg729-*.deb
    args:
      chdir: /home/ubuntu/github/rtpengine

  - name: Make rtp engine directory
    file:
      path: /etc/rtpengine
      state: directory
      owner:
      group:
      mode: '0755'
    become: True


